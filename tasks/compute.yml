---

  - name: copy munge key to compute nodes when slurm_munge_key_from_nfs is False
    copy: src=files/munge.key
          dest=/etc/munge/munge.key
          owner=munge
          group=munge
          mode=0400
    when: slurm_munge_key_from_nfs == False
    notify:
     - restart munge

  - name: copy the munge key from NFS when slurm_munge_key_from_nfs is True
    command: cp -v {{ slurm_munge_key_nfs }} /etc/munge/munge.key creates=/etc/munge/munge.key
    when: slurm_munge_key_from_nfs == True
    notify:
     - restart munge

  - name: set permissions on the munge key from NFS
    file: path=/etc/munge/munge.key mode=0400 owner=munge group=munge
    when: slurm_munge_key_from_nfs == True
    notify:
     - restart munge

  - name: start and enable munge on compute nodes
    service: name=munge state=started enabled=yes
    notify:
     - restart munge
    when: ansible_connection != 'chroot'

  - name: enable munge on compute nodes
    command: systemctl enable munge
    when: ansible_connection == 'chroot'

  - name: install slurmd packages
    package:
      name: "{{ slurm_compute_packages }}"
      state: present
    when: slurm_compute_packages is defined

  - name: Make sure /usr/local/libexec/slurm/epilog.d exists
    file: path=/usr/local/libexec/slurm/epilog.d state=directory owner=root group=root mode=0755 recurse=yes

  - name: Make sure /usr/local/libexec/slurm/prolog.d exists
    file: path=/usr/local/libexec/slurm/prolog.d state=directory owner=root group=root mode=0755 recurse=yes

  - name: Create prolog scripts
    template:
      src={{ item }}
      dest=/usr/local/libexec/slurm/prolog.d/{{ item | basename | regex_replace('\.j2$', '') }}
      owner=root
      group=root
      mode=0755
    loop: "{{ slurm_prolog_scripts }}"

  - name: Create epilog scripts
    template:
       src={{ item }}
       dest=/usr/local/libexec/slurm/epilog.d/{{ item | basename | regex_replace('\.j2$', '') }}
       owner=root
       group=root
       mode=0755
    loop: "{{ slurm_epilog_scripts }}"

  - name: Create taskprolog script
    template:
       src={{ slurm_taskprolog_script }}
       dest=/usr/local/libexec/slurm/taskprolog.sh
       owner=root
       group=root
       mode=0755
    when: slurm_TaskProlog | default(False)
  
  - name: Create taskepilog script
    template:
       src={{ slurm_taskepilog_script }}
       dest=/usr/local/libexec/slurm/taskepilog.sh
       owner=root
       group=root
       mode=0755
    when: slurm_TaskEpilog | default(False)

  #- name: Create empty prolog script
  #  template: src=prolog.sh.j2 dest=/usr/local/libexec/slurm/prolog.d/prolog.sh owner=root group=root mode=0755

  #- name: Create empty prolog script
  #  template: src=taskprolog.sh.j2 dest=/usr/local/libexec/slurm/taskprolog.sh owner=root group=root mode=0755
  


  - name: create systemd override directories for slurmd
    file: path="/etc/systemd/system/slurmd.service.d" state=directory owner=root mode=0755
    when: slurm_systemd_override_slurmd and ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: template in systemd override file for slurmd
    template: src=systemd_override.conf.j2 dest=/etc/systemd/system/slurmd.service.d/slurmd_override.conf backup=no owner=root mode=0644
    when: slurm_systemd_override_slurmd and ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: template in cgroup_allowed_devices for slurm
    template: src=cgroup_allowed_devices_file.j2 dest=/etc/slurm/cgroup_allowed_devices_file.conf owner=root mode=0644
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: start and enable slurmd
    service: name={{ slurmd_service }} state=started enabled=yes
    when: ansible_connection != 'chroot'

  - name: enable slurmd on chroot
    command: systemctl enable {{ slurmd_service }}
    when: ansible_connection == 'chroot'
